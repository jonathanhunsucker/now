{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["months","Now","now","className","map","month","Month","key","then","Date","getFullYear","past","getMonth","present","future","name","toLocaleString","day","hour","minute","second","Clip","isNegative","children","janOneThisYear","setMonth","setDate","setHours","setMinutes","setSeconds","janOneNextYear","setYear","formatted","toFixed","style","color","background","height","marginTop","calculatePointerYFromEvent","event","clientY","currentTarget","clientTop","clientHeight","App","date","useState","setNow","pointerY","setPointerY","time","start","end","getYearBookendsFromDate","getTime","point","linearInterpolate","translatePointerPositionToDate","onPointerUp","useEffect","id","setInterval","clearInterval","onPointerDown","setPointerCapture","pointerId","onPointerMove","onPointerLeave","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.48e953f7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nconst months = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n\nfunction App({date = new Date()}) {\n  const [now, setNow] = useState(date)\n\n  // position of last pointer down\n  // eg. `0` is top of screen, and `1` is bottom\n  const [pointerY, setPointerY] = useState(null)\n\n  const time = pointerY !== null ? translatePointerPositionToDate(now, pointerY) : now\n\n  useEffect(() => {\n    const id = setInterval(() => setNow(new Date()), 1000)\n    return () => clearInterval(id)\n  }, [])\n\n  function onPointerDown(event) {\n    event.currentTarget.setPointerCapture(event.pointerId)\n    setPointerY(calculatePointerYFromEvent(event))\n  }\n  function onPointerMove(event) {\n    setPointerY(calculatePointerYFromEvent(event))\n  }\n  function onPointerUp() {\n    setPointerY(null)\n  }\n\n  return (\n    <div\n      className=\"App\"\n      onPointerDown={onPointerDown}\n      onPointerMove={onPointerMove}\n      onPointerUp={onPointerUp}\n      onPointerLeave={onPointerUp}\n    >\n      <Clip now={time} isNegative={true}>\n        <Now now={time} />\n      </Clip>\n      <Clip now={time} isNegative={false}>\n        <Now now={time} />\n      </Clip>\n    </div>\n  )\n}\n\nfunction Now({ now }) {\n  return (\n    <div className=\"Now\">\n      <div className=\"Calendar\">\n        {months.map((month) => <Month key={month} now={now} month={month} />)}\n      </div>\n    </div>\n  )\n}\n\nfunction Month({ now, month }) {\n  const then = new Date(now.getFullYear(), month, 1, 0, 0, 0, 0)\n\n  const past = now.getMonth() > then.getMonth()\n  const present = now.getMonth() === then.getMonth()\n  const future = now.getMonth() < month\n\n  const name = then.toLocaleString('default', { month: 'long' })\n\n  return <div className=\"Month\">\n    {past && <strike>{name}</strike>}\n    {present && <em>{now.toLocaleString('default', { month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', second: 'numeric' })}</em>}\n    {future && <span>{name}</span>}\n  </div>\n}\n\nfunction Clip({ now, isNegative, children }) {\n  const janOneThisYear = new Date(now)\n  janOneThisYear.setMonth(0)\n  janOneThisYear.setDate(1)\n  janOneThisYear.setHours(0)\n  janOneThisYear.setMinutes(0)\n  janOneThisYear.setSeconds(0)\n  const janOneNextYear = new Date(janOneThisYear)\n  janOneNextYear.setYear(janOneNextYear.getFullYear() + 1)\n  const height = (now - janOneThisYear) / (janOneNextYear - janOneThisYear)\n  const formatted = `${(height * 100).toFixed(2)}`\n  const style = isNegative ? { color: 'white', background: 'black', height: `${formatted}vh` } : { color: 'black', background: 'white', marginTop: `-${formatted}vh` }\n  return (\n    <div className=\"BackdropContainer\">\n      <div style={style}>\n        {children}\n      </div>\n    </div>\n  )\n}\n\nfunction calculatePointerYFromEvent(event) {\n  return (event.clientY - event.currentTarget.clientTop) / event.currentTarget.clientHeight\n}\n\nfunction translatePointerPositionToDate(date, pointerY) {\n  const [start, end] = getYearBookendsFromDate(date).map((date) => date.getTime())\n  const result = new Date(linearInterpolate(start, end, pointerY))\n  return result\n}\n\nfunction getYearBookendsFromDate(date) {\n  const start = new Date(date.getFullYear(), 0, 0, 0, 0, 0)\n  const end = new Date(date.getFullYear() + 1, 0, 0, 0, 0, 0)\n  return [start, end]\n}\n\nfunction linearInterpolate(start, end, point) {\n  return start + (end - start) * point\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}